/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ABDyeingService_H
#define ABDyeingService_H

#include <thrift/TDispatchProcessor.h>
#include "ab_dyeing_types.h"

namespace inveno {

class ABDyeingServiceIf {
 public:
  virtual ~ABDyeingServiceIf() {}
  virtual void dyeing(ABDyeingReply& _return, const std::string& uid, const ABDyeingRequest& req) = 0;
  virtual void DyeingLan(ABDyeingReply& _return, const std::string& uid, const ABDyeingLanRequest& req) = 0;
  virtual void BatchDyeing(ABDyeingBatchReply& _return, const ABDyeingBatchRequest& batch_reqs) = 0;
  virtual void BatchDyeingLan(ABDyeingBatchReply& _return, const ABDyeingBatchLanRequest& batch_reqs) = 0;
};

class ABDyeingServiceIfFactory {
 public:
  typedef ABDyeingServiceIf Handler;

  virtual ~ABDyeingServiceIfFactory() {}

  virtual ABDyeingServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ABDyeingServiceIf* /* handler */) = 0;
};

class ABDyeingServiceIfSingletonFactory : virtual public ABDyeingServiceIfFactory {
 public:
  ABDyeingServiceIfSingletonFactory(const boost::shared_ptr<ABDyeingServiceIf>& iface) : iface_(iface) {}
  virtual ~ABDyeingServiceIfSingletonFactory() {}

  virtual ABDyeingServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ABDyeingServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ABDyeingServiceIf> iface_;
};

class ABDyeingServiceNull : virtual public ABDyeingServiceIf {
 public:
  virtual ~ABDyeingServiceNull() {}
  void dyeing(ABDyeingReply& /* _return */, const std::string& /* uid */, const ABDyeingRequest& /* req */) {
    return;
  }
  void DyeingLan(ABDyeingReply& /* _return */, const std::string& /* uid */, const ABDyeingLanRequest& /* req */) {
    return;
  }
  void BatchDyeing(ABDyeingBatchReply& /* _return */, const ABDyeingBatchRequest& /* batch_reqs */) {
    return;
  }
  void BatchDyeingLan(ABDyeingBatchReply& /* _return */, const ABDyeingBatchLanRequest& /* batch_reqs */) {
    return;
  }
};

typedef struct _ABDyeingService_dyeing_args__isset {
  _ABDyeingService_dyeing_args__isset() : uid(false), req(false) {}
  bool uid;
  bool req;
} _ABDyeingService_dyeing_args__isset;

class ABDyeingService_dyeing_args {
 public:

  ABDyeingService_dyeing_args() : uid() {
  }

  virtual ~ABDyeingService_dyeing_args() throw() {}

  std::string uid;
  ABDyeingRequest req;

  _ABDyeingService_dyeing_args__isset __isset;

  void __set_uid(const std::string& val) {
    uid = val;
  }

  void __set_req(const ABDyeingRequest& val) {
    req = val;
  }

  bool operator == (const ABDyeingService_dyeing_args & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const ABDyeingService_dyeing_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ABDyeingService_dyeing_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ABDyeingService_dyeing_pargs {
 public:


  virtual ~ABDyeingService_dyeing_pargs() throw() {}

  const std::string* uid;
  const ABDyeingRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ABDyeingService_dyeing_result__isset {
  _ABDyeingService_dyeing_result__isset() : success(false) {}
  bool success;
} _ABDyeingService_dyeing_result__isset;

class ABDyeingService_dyeing_result {
 public:

  ABDyeingService_dyeing_result() {
  }

  virtual ~ABDyeingService_dyeing_result() throw() {}

  ABDyeingReply success;

  _ABDyeingService_dyeing_result__isset __isset;

  void __set_success(const ABDyeingReply& val) {
    success = val;
  }

  bool operator == (const ABDyeingService_dyeing_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ABDyeingService_dyeing_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ABDyeingService_dyeing_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ABDyeingService_dyeing_presult__isset {
  _ABDyeingService_dyeing_presult__isset() : success(false) {}
  bool success;
} _ABDyeingService_dyeing_presult__isset;

class ABDyeingService_dyeing_presult {
 public:


  virtual ~ABDyeingService_dyeing_presult() throw() {}

  ABDyeingReply* success;

  _ABDyeingService_dyeing_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ABDyeingService_DyeingLan_args__isset {
  _ABDyeingService_DyeingLan_args__isset() : uid(false), req(false) {}
  bool uid;
  bool req;
} _ABDyeingService_DyeingLan_args__isset;

class ABDyeingService_DyeingLan_args {
 public:

  ABDyeingService_DyeingLan_args() : uid() {
  }

  virtual ~ABDyeingService_DyeingLan_args() throw() {}

  std::string uid;
  ABDyeingLanRequest req;

  _ABDyeingService_DyeingLan_args__isset __isset;

  void __set_uid(const std::string& val) {
    uid = val;
  }

  void __set_req(const ABDyeingLanRequest& val) {
    req = val;
  }

  bool operator == (const ABDyeingService_DyeingLan_args & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const ABDyeingService_DyeingLan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ABDyeingService_DyeingLan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ABDyeingService_DyeingLan_pargs {
 public:


  virtual ~ABDyeingService_DyeingLan_pargs() throw() {}

  const std::string* uid;
  const ABDyeingLanRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ABDyeingService_DyeingLan_result__isset {
  _ABDyeingService_DyeingLan_result__isset() : success(false) {}
  bool success;
} _ABDyeingService_DyeingLan_result__isset;

class ABDyeingService_DyeingLan_result {
 public:

  ABDyeingService_DyeingLan_result() {
  }

  virtual ~ABDyeingService_DyeingLan_result() throw() {}

  ABDyeingReply success;

  _ABDyeingService_DyeingLan_result__isset __isset;

  void __set_success(const ABDyeingReply& val) {
    success = val;
  }

  bool operator == (const ABDyeingService_DyeingLan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ABDyeingService_DyeingLan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ABDyeingService_DyeingLan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ABDyeingService_DyeingLan_presult__isset {
  _ABDyeingService_DyeingLan_presult__isset() : success(false) {}
  bool success;
} _ABDyeingService_DyeingLan_presult__isset;

class ABDyeingService_DyeingLan_presult {
 public:


  virtual ~ABDyeingService_DyeingLan_presult() throw() {}

  ABDyeingReply* success;

  _ABDyeingService_DyeingLan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ABDyeingService_BatchDyeing_args__isset {
  _ABDyeingService_BatchDyeing_args__isset() : batch_reqs(false) {}
  bool batch_reqs;
} _ABDyeingService_BatchDyeing_args__isset;

class ABDyeingService_BatchDyeing_args {
 public:

  ABDyeingService_BatchDyeing_args() {
  }

  virtual ~ABDyeingService_BatchDyeing_args() throw() {}

  ABDyeingBatchRequest batch_reqs;

  _ABDyeingService_BatchDyeing_args__isset __isset;

  void __set_batch_reqs(const ABDyeingBatchRequest& val) {
    batch_reqs = val;
  }

  bool operator == (const ABDyeingService_BatchDyeing_args & rhs) const
  {
    if (!(batch_reqs == rhs.batch_reqs))
      return false;
    return true;
  }
  bool operator != (const ABDyeingService_BatchDyeing_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ABDyeingService_BatchDyeing_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ABDyeingService_BatchDyeing_pargs {
 public:


  virtual ~ABDyeingService_BatchDyeing_pargs() throw() {}

  const ABDyeingBatchRequest* batch_reqs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ABDyeingService_BatchDyeing_result__isset {
  _ABDyeingService_BatchDyeing_result__isset() : success(false) {}
  bool success;
} _ABDyeingService_BatchDyeing_result__isset;

class ABDyeingService_BatchDyeing_result {
 public:

  ABDyeingService_BatchDyeing_result() {
  }

  virtual ~ABDyeingService_BatchDyeing_result() throw() {}

  ABDyeingBatchReply success;

  _ABDyeingService_BatchDyeing_result__isset __isset;

  void __set_success(const ABDyeingBatchReply& val) {
    success = val;
  }

  bool operator == (const ABDyeingService_BatchDyeing_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ABDyeingService_BatchDyeing_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ABDyeingService_BatchDyeing_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ABDyeingService_BatchDyeing_presult__isset {
  _ABDyeingService_BatchDyeing_presult__isset() : success(false) {}
  bool success;
} _ABDyeingService_BatchDyeing_presult__isset;

class ABDyeingService_BatchDyeing_presult {
 public:


  virtual ~ABDyeingService_BatchDyeing_presult() throw() {}

  ABDyeingBatchReply* success;

  _ABDyeingService_BatchDyeing_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ABDyeingService_BatchDyeingLan_args__isset {
  _ABDyeingService_BatchDyeingLan_args__isset() : batch_reqs(false) {}
  bool batch_reqs;
} _ABDyeingService_BatchDyeingLan_args__isset;

class ABDyeingService_BatchDyeingLan_args {
 public:

  ABDyeingService_BatchDyeingLan_args() {
  }

  virtual ~ABDyeingService_BatchDyeingLan_args() throw() {}

  ABDyeingBatchLanRequest batch_reqs;

  _ABDyeingService_BatchDyeingLan_args__isset __isset;

  void __set_batch_reqs(const ABDyeingBatchLanRequest& val) {
    batch_reqs = val;
  }

  bool operator == (const ABDyeingService_BatchDyeingLan_args & rhs) const
  {
    if (!(batch_reqs == rhs.batch_reqs))
      return false;
    return true;
  }
  bool operator != (const ABDyeingService_BatchDyeingLan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ABDyeingService_BatchDyeingLan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ABDyeingService_BatchDyeingLan_pargs {
 public:


  virtual ~ABDyeingService_BatchDyeingLan_pargs() throw() {}

  const ABDyeingBatchLanRequest* batch_reqs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ABDyeingService_BatchDyeingLan_result__isset {
  _ABDyeingService_BatchDyeingLan_result__isset() : success(false) {}
  bool success;
} _ABDyeingService_BatchDyeingLan_result__isset;

class ABDyeingService_BatchDyeingLan_result {
 public:

  ABDyeingService_BatchDyeingLan_result() {
  }

  virtual ~ABDyeingService_BatchDyeingLan_result() throw() {}

  ABDyeingBatchReply success;

  _ABDyeingService_BatchDyeingLan_result__isset __isset;

  void __set_success(const ABDyeingBatchReply& val) {
    success = val;
  }

  bool operator == (const ABDyeingService_BatchDyeingLan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ABDyeingService_BatchDyeingLan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ABDyeingService_BatchDyeingLan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ABDyeingService_BatchDyeingLan_presult__isset {
  _ABDyeingService_BatchDyeingLan_presult__isset() : success(false) {}
  bool success;
} _ABDyeingService_BatchDyeingLan_presult__isset;

class ABDyeingService_BatchDyeingLan_presult {
 public:


  virtual ~ABDyeingService_BatchDyeingLan_presult() throw() {}

  ABDyeingBatchReply* success;

  _ABDyeingService_BatchDyeingLan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ABDyeingServiceClient : virtual public ABDyeingServiceIf {
 public:
  ABDyeingServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ABDyeingServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void dyeing(ABDyeingReply& _return, const std::string& uid, const ABDyeingRequest& req);
  void send_dyeing(const std::string& uid, const ABDyeingRequest& req);
  void recv_dyeing(ABDyeingReply& _return);
  void DyeingLan(ABDyeingReply& _return, const std::string& uid, const ABDyeingLanRequest& req);
  void send_DyeingLan(const std::string& uid, const ABDyeingLanRequest& req);
  void recv_DyeingLan(ABDyeingReply& _return);
  void BatchDyeing(ABDyeingBatchReply& _return, const ABDyeingBatchRequest& batch_reqs);
  void send_BatchDyeing(const ABDyeingBatchRequest& batch_reqs);
  void recv_BatchDyeing(ABDyeingBatchReply& _return);
  void BatchDyeingLan(ABDyeingBatchReply& _return, const ABDyeingBatchLanRequest& batch_reqs);
  void send_BatchDyeingLan(const ABDyeingBatchLanRequest& batch_reqs);
  void recv_BatchDyeingLan(ABDyeingBatchReply& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ABDyeingServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ABDyeingServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ABDyeingServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_dyeing(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DyeingLan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_BatchDyeing(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_BatchDyeingLan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ABDyeingServiceProcessor(boost::shared_ptr<ABDyeingServiceIf> iface) :
    iface_(iface) {
    processMap_["dyeing"] = &ABDyeingServiceProcessor::process_dyeing;
    processMap_["DyeingLan"] = &ABDyeingServiceProcessor::process_DyeingLan;
    processMap_["BatchDyeing"] = &ABDyeingServiceProcessor::process_BatchDyeing;
    processMap_["BatchDyeingLan"] = &ABDyeingServiceProcessor::process_BatchDyeingLan;
  }

  virtual ~ABDyeingServiceProcessor() {}
};

class ABDyeingServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ABDyeingServiceProcessorFactory(const ::boost::shared_ptr< ABDyeingServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ABDyeingServiceIfFactory > handlerFactory_;
};

class ABDyeingServiceMultiface : virtual public ABDyeingServiceIf {
 public:
  ABDyeingServiceMultiface(std::vector<boost::shared_ptr<ABDyeingServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ABDyeingServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ABDyeingServiceIf> > ifaces_;
  ABDyeingServiceMultiface() {}
  void add(boost::shared_ptr<ABDyeingServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void dyeing(ABDyeingReply& _return, const std::string& uid, const ABDyeingRequest& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dyeing(_return, uid, req);
    }
    ifaces_[i]->dyeing(_return, uid, req);
    return;
  }

  void DyeingLan(ABDyeingReply& _return, const std::string& uid, const ABDyeingLanRequest& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DyeingLan(_return, uid, req);
    }
    ifaces_[i]->DyeingLan(_return, uid, req);
    return;
  }

  void BatchDyeing(ABDyeingBatchReply& _return, const ABDyeingBatchRequest& batch_reqs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->BatchDyeing(_return, batch_reqs);
    }
    ifaces_[i]->BatchDyeing(_return, batch_reqs);
    return;
  }

  void BatchDyeingLan(ABDyeingBatchReply& _return, const ABDyeingBatchLanRequest& batch_reqs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->BatchDyeingLan(_return, batch_reqs);
    }
    ifaces_[i]->BatchDyeingLan(_return, batch_reqs);
    return;
  }

};

} // namespace

#endif
