/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ab_dyeing_types.h"

#include <algorithm>

namespace inveno {

int _kab_statusValues[] = {
  ab_status::RC_STATUS_OK,
  ab_status::RC_SERVER_ERROR,
  ab_status::RC_SERVER_FAULT,
  ab_status::RC_UNKNOW_ERROR
};
const char* _kab_statusNames[] = {
  "RC_STATUS_OK",
  "RC_SERVER_ERROR",
  "RC_SERVER_FAULT",
  "RC_UNKNOW_ERROR"
};
const std::map<int, const char*> _ab_status_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kab_statusValues, _kab_statusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* ABDyeingRequest::ascii_fingerprint = "8E2AD6401E83558ECFD6A13D74DD0A3F";
const uint8_t ABDyeingRequest::binary_fingerprint[16] = {0x8E,0x2A,0xD6,0x40,0x1E,0x83,0x55,0x8E,0xCF,0xD6,0xA1,0x3D,0x74,0xDD,0x0A,0x3F};

uint32_t ABDyeingRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_app = false;
  bool isset_app_ver = false;
  bool isset__types = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->app);
          isset_app = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->app_ver);
          isset_app_ver = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_types.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->_types.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->_types[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          isset__types = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_app)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_app_ver)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__types)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ABDyeingRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ABDyeingRequest");

  xfer += oprot->writeFieldBegin("app", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->app);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("app_ver", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->app_ver);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_types", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->_types.size()));
    std::vector<std::string> ::const_iterator _iter5;
    for (_iter5 = this->_types.begin(); _iter5 != this->_types.end(); ++_iter5)
    {
      xfer += oprot->writeString((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ABDyeingRequest &a, ABDyeingRequest &b) {
  using ::std::swap;
  swap(a.app, b.app);
  swap(a.app_ver, b.app_ver);
  swap(a._types, b._types);
}

const char* ABDyeingLanRequest::ascii_fingerprint = "D5082811F603CA229965DA45DAFDD5B7";
const uint8_t ABDyeingLanRequest::binary_fingerprint[16] = {0xD5,0x08,0x28,0x11,0xF6,0x03,0xCA,0x22,0x99,0x65,0xDA,0x45,0xDA,0xFD,0xD5,0xB7};

uint32_t ABDyeingLanRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_app = false;
  bool isset_app_ver = false;
  bool isset_app_lan = false;
  bool isset__types = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->app);
          isset_app = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->app_ver);
          isset_app_ver = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->app_lan);
          isset_app_lan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_types.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->_types.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += iprot->readString(this->_types[_i10]);
            }
            xfer += iprot->readListEnd();
          }
          isset__types = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_app)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_app_ver)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_app_lan)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__types)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ABDyeingLanRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ABDyeingLanRequest");

  xfer += oprot->writeFieldBegin("app", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->app);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("app_ver", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->app_ver);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("app_lan", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->app_lan);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_types", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->_types.size()));
    std::vector<std::string> ::const_iterator _iter11;
    for (_iter11 = this->_types.begin(); _iter11 != this->_types.end(); ++_iter11)
    {
      xfer += oprot->writeString((*_iter11));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ABDyeingLanRequest &a, ABDyeingLanRequest &b) {
  using ::std::swap;
  swap(a.app, b.app);
  swap(a.app_ver, b.app_ver);
  swap(a.app_lan, b.app_lan);
  swap(a._types, b._types);
}

const char* ABDyeingUidReqInfo::ascii_fingerprint = "9BE6BE471EA55C3896E16579016D30E0";
const uint8_t ABDyeingUidReqInfo::binary_fingerprint[16] = {0x9B,0xE6,0xBE,0x47,0x1E,0xA5,0x5C,0x38,0x96,0xE1,0x65,0x79,0x01,0x6D,0x30,0xE0};

uint32_t ABDyeingUidReqInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_uid = false;
  bool isset__uid_info = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uid);
          isset_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_uid_info.read(iprot);
          isset__uid_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_uid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__uid_info)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ABDyeingUidReqInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ABDyeingUidReqInfo");

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_uid_info", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->_uid_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ABDyeingUidReqInfo &a, ABDyeingUidReqInfo &b) {
  using ::std::swap;
  swap(a.uid, b.uid);
  swap(a._uid_info, b._uid_info);
}

const char* ABDyeingUidLanReqInfo::ascii_fingerprint = "C393B87B4067961C69A1CE411982877D";
const uint8_t ABDyeingUidLanReqInfo::binary_fingerprint[16] = {0xC3,0x93,0xB8,0x7B,0x40,0x67,0x96,0x1C,0x69,0xA1,0xCE,0x41,0x19,0x82,0x87,0x7D};

uint32_t ABDyeingUidLanReqInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_uid = false;
  bool isset__uid_lan_info = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uid);
          isset_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_uid_lan_info.read(iprot);
          isset__uid_lan_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_uid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__uid_lan_info)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ABDyeingUidLanReqInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ABDyeingUidLanReqInfo");

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_uid_lan_info", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->_uid_lan_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ABDyeingUidLanReqInfo &a, ABDyeingUidLanReqInfo &b) {
  using ::std::swap;
  swap(a.uid, b.uid);
  swap(a._uid_lan_info, b._uid_lan_info);
}

const char* ABDyeingBatchRequest::ascii_fingerprint = "F938BDB6ACACAE9A2E45992B2DE4F21F";
const uint8_t ABDyeingBatchRequest::binary_fingerprint[16] = {0xF9,0x38,0xBD,0xB6,0xAC,0xAC,0xAE,0x9A,0x2E,0x45,0x99,0x2B,0x2D,0xE4,0xF2,0x1F};

uint32_t ABDyeingBatchRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__uid_req_infos = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_uid_req_infos.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->_uid_req_infos.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += this->_uid_req_infos[_i16].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__uid_req_infos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__uid_req_infos)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ABDyeingBatchRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ABDyeingBatchRequest");

  xfer += oprot->writeFieldBegin("_uid_req_infos", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_uid_req_infos.size()));
    std::vector<ABDyeingUidReqInfo> ::const_iterator _iter17;
    for (_iter17 = this->_uid_req_infos.begin(); _iter17 != this->_uid_req_infos.end(); ++_iter17)
    {
      xfer += (*_iter17).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ABDyeingBatchRequest &a, ABDyeingBatchRequest &b) {
  using ::std::swap;
  swap(a._uid_req_infos, b._uid_req_infos);
}

const char* ABDyeingBatchLanRequest::ascii_fingerprint = "7A37B6B335A2B048A2C50259EEDCC134";
const uint8_t ABDyeingBatchLanRequest::binary_fingerprint[16] = {0x7A,0x37,0xB6,0xB3,0x35,0xA2,0xB0,0x48,0xA2,0xC5,0x02,0x59,0xEE,0xDC,0xC1,0x34};

uint32_t ABDyeingBatchLanRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__uid_lan_req_infos = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_uid_lan_req_infos.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->_uid_lan_req_infos.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += this->_uid_lan_req_infos[_i22].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__uid_lan_req_infos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__uid_lan_req_infos)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ABDyeingBatchLanRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ABDyeingBatchLanRequest");

  xfer += oprot->writeFieldBegin("_uid_lan_req_infos", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_uid_lan_req_infos.size()));
    std::vector<ABDyeingUidLanReqInfo> ::const_iterator _iter23;
    for (_iter23 = this->_uid_lan_req_infos.begin(); _iter23 != this->_uid_lan_req_infos.end(); ++_iter23)
    {
      xfer += (*_iter23).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ABDyeingBatchLanRequest &a, ABDyeingBatchLanRequest &b) {
  using ::std::swap;
  swap(a._uid_lan_req_infos, b._uid_lan_req_infos);
}

const char* ABDyeingEntry::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t ABDyeingEntry::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t ABDyeingEntry::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;
  bool isset_config_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->config_id);
          isset_config_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_config_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ABDyeingEntry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ABDyeingEntry");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("config_id", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->config_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ABDyeingEntry &a, ABDyeingEntry &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.config_id, b.config_id);
}

const char* ABDyeingReply::ascii_fingerprint = "101E22EEE714785E462FCF6056B14937";
const uint8_t ABDyeingReply::binary_fingerprint[16] = {0x10,0x1E,0x22,0xEE,0xE7,0x14,0x78,0x5E,0x46,0x2F,0xCF,0x60,0x56,0xB1,0x49,0x37};

uint32_t ABDyeingReply::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_status = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast24;
          xfer += iprot->readI32(ecast24);
          this->status = (ab_status::type)ecast24;
          isset_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_entries.clear();
            uint32_t _size25;
            ::apache::thrift::protocol::TType _etype28;
            xfer += iprot->readListBegin(_etype28, _size25);
            this->_entries.resize(_size25);
            uint32_t _i29;
            for (_i29 = 0; _i29 < _size25; ++_i29)
            {
              xfer += this->_entries[_i29].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset._entries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_status)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ABDyeingReply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ABDyeingReply");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  if (this->__isset._entries) {
    xfer += oprot->writeFieldBegin("_entries", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_entries.size()));
      std::vector<ABDyeingEntry> ::const_iterator _iter30;
      for (_iter30 = this->_entries.begin(); _iter30 != this->_entries.end(); ++_iter30)
      {
        xfer += (*_iter30).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ABDyeingReply &a, ABDyeingReply &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a._entries, b._entries);
  swap(a.__isset, b.__isset);
}

const char* ABDyeingUidRepInfo::ascii_fingerprint = "E09E9FECEBC4573D5CC6E2BEB8658A51";
const uint8_t ABDyeingUidRepInfo::binary_fingerprint[16] = {0xE0,0x9E,0x9F,0xEC,0xEB,0xC4,0x57,0x3D,0x5C,0xC6,0xE2,0xBE,0xB8,0x65,0x8A,0x51};

uint32_t ABDyeingUidRepInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_uid = false;
  bool isset__uid_rep = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uid);
          isset_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->_uid_rep.read(iprot);
          isset__uid_rep = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_uid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__uid_rep)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ABDyeingUidRepInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ABDyeingUidRepInfo");

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_uid_rep", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->_uid_rep.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ABDyeingUidRepInfo &a, ABDyeingUidRepInfo &b) {
  using ::std::swap;
  swap(a.uid, b.uid);
  swap(a._uid_rep, b._uid_rep);
}

const char* ABDyeingBatchReply::ascii_fingerprint = "39BA943D70B6558920B6773DA6E916CF";
const uint8_t ABDyeingBatchReply::binary_fingerprint[16] = {0x39,0xBA,0x94,0x3D,0x70,0xB6,0x55,0x89,0x20,0xB6,0x77,0x3D,0xA6,0xE9,0x16,0xCF};

uint32_t ABDyeingBatchReply::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_status = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast31;
          xfer += iprot->readI32(ecast31);
          this->status = (ab_status::type)ecast31;
          isset_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_uid_rep_infos.clear();
            uint32_t _size32;
            ::apache::thrift::protocol::TType _etype35;
            xfer += iprot->readListBegin(_etype35, _size32);
            this->_uid_rep_infos.resize(_size32);
            uint32_t _i36;
            for (_i36 = 0; _i36 < _size32; ++_i36)
            {
              xfer += this->_uid_rep_infos[_i36].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset._uid_rep_infos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_status)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ABDyeingBatchReply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ABDyeingBatchReply");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  if (this->__isset._uid_rep_infos) {
    xfer += oprot->writeFieldBegin("_uid_rep_infos", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_uid_rep_infos.size()));
      std::vector<ABDyeingUidRepInfo> ::const_iterator _iter37;
      for (_iter37 = this->_uid_rep_infos.begin(); _iter37 != this->_uid_rep_infos.end(); ++_iter37)
      {
        xfer += (*_iter37).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ABDyeingBatchReply &a, ABDyeingBatchReply &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a._uid_rep_infos, b._uid_rep_infos);
  swap(a.__isset, b.__isset);
}

} // namespace
